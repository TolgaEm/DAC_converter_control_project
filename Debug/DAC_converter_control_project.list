
DAC_converter_control_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010cc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001254  08001254  00011254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001264  08001264  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001264  08001264  00011264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800126c  0800126c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800126c  0800126c  0001126c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001270  08001270  00011270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000024  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002e32  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b3a  00000000  00000000  00022e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000380  00000000  00000000  000239a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000318  00000000  00000000  00023d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e9ca  00000000  00000000  00024040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003811  00000000  00000000  00042a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbc9d  00000000  00000000  0004621b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00101eb8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000cb0  00000000  00000000  00101f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800123c 	.word	0x0800123c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800123c 	.word	0x0800123c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
void DAC1_init(void);
void GPIO_init(void);

uint16_t counter=0;

int main(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

  SystemClock_Config();
 80004d0:	f000 f852 	bl	8000578 <SystemClock_Config>
  DAC1_init();
 80004d4:	f000 f81e 	bl	8000514 <DAC1_init>
  GPIO_init();
 80004d8:	f000 f836 	bl	8000548 <GPIO_init>

  while (1){

	  for ( counter=0; counter < 4096; counter++){
 80004dc:	4b0b      	ldr	r3, [pc, #44]	; (800050c <main+0x40>)
 80004de:	2200      	movs	r2, #0
 80004e0:	801a      	strh	r2, [r3, #0]
 80004e2:	e009      	b.n	80004f8 <main+0x2c>

	  			DAC1->DHR12R1 = counter;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <main+0x40>)
 80004e6:	881a      	ldrh	r2, [r3, #0]
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <main+0x44>)
 80004ea:	609a      	str	r2, [r3, #8]
	  for ( counter=0; counter < 4096; counter++){
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <main+0x40>)
 80004ee:	881b      	ldrh	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <main+0x40>)
 80004f6:	801a      	strh	r2, [r3, #0]
 80004f8:	4b04      	ldr	r3, [pc, #16]	; (800050c <main+0x40>)
 80004fa:	881b      	ldrh	r3, [r3, #0]
 80004fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000500:	d3f0      	bcc.n	80004e4 <main+0x18>
	  		}

	  		counter = 0;
 8000502:	4b02      	ldr	r3, [pc, #8]	; (800050c <main+0x40>)
 8000504:	2200      	movs	r2, #0
 8000506:	801a      	strh	r2, [r3, #0]
	  for ( counter=0; counter < 4096; counter++){
 8000508:	e7e8      	b.n	80004dc <main+0x10>
 800050a:	bf00      	nop
 800050c:	20000028 	.word	0x20000028
 8000510:	40007400 	.word	0x40007400

08000514 <DAC1_init>:

  }
}

void DAC1_init(void){
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_DACEN; /* DAC1  clock bus enable */
 8000518:	4b09      	ldr	r3, [pc, #36]	; (8000540 <DAC1_init+0x2c>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a08      	ldr	r2, [pc, #32]	; (8000540 <DAC1_init+0x2c>)
 800051e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40

	DAC1->CR |= DAC_CR_EN1; /* DAC1 enable */
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <DAC1_init+0x30>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <DAC1_init+0x30>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	6013      	str	r3, [r2, #0]
	DAC1->DHR12R1 = 0X00; /* DAC1 assign 0 */
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <DAC1_init+0x30>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]


}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40023800 	.word	0x40023800
 8000544:	40007400 	.word	0x40007400

08000548 <GPIO_init>:

void GPIO_init(void){
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; /* PORTA clock bus enable */
 800054c:	4b08      	ldr	r3, [pc, #32]	; (8000570 <GPIO_init+0x28>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4a07      	ldr	r2, [pc, #28]	; (8000570 <GPIO_init+0x28>)
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |= GPIO_MODER_MODER4; /* PA4 set analog mode */
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <GPIO_init+0x2c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a05      	ldr	r2, [pc, #20]	; (8000574 <GPIO_init+0x2c>)
 800055e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000562:	6013      	str	r3, [r2, #0]

}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40023800 	.word	0x40023800
 8000574:	40020000 	.word	0x40020000

08000578 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fe50 	bl	800122c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b23      	ldr	r3, [pc, #140]	; (8000630 <SystemClock_Config+0xb8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a22      	ldr	r2, [pc, #136]	; (8000630 <SystemClock_Config+0xb8>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b20      	ldr	r3, [pc, #128]	; (8000630 <SystemClock_Config+0xb8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <SystemClock_Config+0xbc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <SystemClock_Config+0xbc>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <SystemClock_Config+0xbc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 f997 	bl	800091c <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f4:	f000 f820 	bl	8000638 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fbf8 	bl	8000e0c <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000622:	f000 f809 	bl	8000638 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <Error_Handler>:

void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>

08000642 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000646:	e7fe      	b.n	8000646 <NMI_Handler+0x4>

08000648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <HardFault_Handler+0x4>

0800064e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <MemManage_Handler+0x4>

08000654 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <BusFault_Handler+0x4>

0800065a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <UsageFault_Handler+0x4>

08000660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068e:	f000 f86f 	bl	8000770 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <SystemInit+0x20>)
 800069e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006a2:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <SystemInit+0x20>)
 80006a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006c2:	490e      	ldr	r1, [pc, #56]	; (80006fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006c4:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c8:	e002      	b.n	80006d0 <LoopCopyDataInit>

080006ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ce:	3304      	adds	r3, #4

080006d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d4:	d3f9      	bcc.n	80006ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d6:	4a0b      	ldr	r2, [pc, #44]	; (8000704 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006d8:	4c0b      	ldr	r4, [pc, #44]	; (8000708 <LoopFillZerobss+0x26>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006dc:	e001      	b.n	80006e2 <LoopFillZerobss>

080006de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006e0:	3204      	adds	r2, #4

080006e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e4:	d3fb      	bcc.n	80006de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006e6:	f7ff ffd7 	bl	8000698 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ea:	f000 fd7b 	bl	80011e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ee:	f7ff feed 	bl	80004cc <main>
  bx  lr    
 80006f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80006f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000700:	08001274 	.word	0x08001274
  ldr r2, =_sbss
 8000704:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000708:	20000030 	.word	0x20000030

0800070c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800070c:	e7fe      	b.n	800070c <ADC_IRQHandler>
	...

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <HAL_InitTick+0x54>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x58>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f8e8 	bl	8000904 <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e00e      	b.n	800075c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b0f      	cmp	r3, #15
 8000742:	d80a      	bhi.n	800075a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000744:	2200      	movs	r2, #0
 8000746:	6879      	ldr	r1, [r7, #4]
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f000 f8be 	bl	80008cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <HAL_InitTick+0x5c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000756:	2300      	movs	r3, #0
 8000758:	e000      	b.n	800075c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000000 	.word	0x20000000
 8000768:	20000008 	.word	0x20000008
 800076c:	20000004 	.word	0x20000004

08000770 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_IncTick+0x20>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	461a      	mov	r2, r3
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_IncTick+0x24>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4413      	add	r3, r2
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <HAL_IncTick+0x24>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000008 	.word	0x20000008
 8000794:	2000002c 	.word	0x2000002c

08000798 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <HAL_GetTick+0x14>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	2000002c 	.word	0x2000002c

080007b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <__NVIC_GetPriorityGrouping+0x18>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	f003 0307 	and.w	r3, r3, #7
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	6039      	str	r1, [r7, #0]
 80007d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	db0a      	blt.n	80007f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	490c      	ldr	r1, [pc, #48]	; (8000818 <__NVIC_SetPriority+0x4c>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	0112      	lsls	r2, r2, #4
 80007ec:	b2d2      	uxtb	r2, r2
 80007ee:	440b      	add	r3, r1
 80007f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f4:	e00a      	b.n	800080c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4908      	ldr	r1, [pc, #32]	; (800081c <__NVIC_SetPriority+0x50>)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	3b04      	subs	r3, #4
 8000804:	0112      	lsls	r2, r2, #4
 8000806:	b2d2      	uxtb	r2, r2
 8000808:	440b      	add	r3, r1
 800080a:	761a      	strb	r2, [r3, #24]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	e000e100 	.word	0xe000e100
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000820:	b480      	push	{r7}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	f1c3 0307 	rsb	r3, r3, #7
 800083a:	2b04      	cmp	r3, #4
 800083c:	bf28      	it	cs
 800083e:	2304      	movcs	r3, #4
 8000840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	3304      	adds	r3, #4
 8000846:	2b06      	cmp	r3, #6
 8000848:	d902      	bls.n	8000850 <NVIC_EncodePriority+0x30>
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3b03      	subs	r3, #3
 800084e:	e000      	b.n	8000852 <NVIC_EncodePriority+0x32>
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	f04f 32ff 	mov.w	r2, #4294967295
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43da      	mvns	r2, r3
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	401a      	ands	r2, r3
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000868:	f04f 31ff 	mov.w	r1, #4294967295
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	43d9      	mvns	r1, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	4313      	orrs	r3, r2
         );
}
 800087a:	4618      	mov	r0, r3
 800087c:	3724      	adds	r7, #36	; 0x24
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
	...

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f7ff ff8e 	bl	80007cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008de:	f7ff ff67 	bl	80007b0 <__NVIC_GetPriorityGrouping>
 80008e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	68b9      	ldr	r1, [r7, #8]
 80008e8:	6978      	ldr	r0, [r7, #20]
 80008ea:	f7ff ff99 	bl	8000820 <NVIC_EncodePriority>
 80008ee:	4602      	mov	r2, r0
 80008f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff ff68 	bl	80007cc <__NVIC_SetPriority>
}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff ffbb 	bl	8000888 <SysTick_Config>
 8000912:	4603      	mov	r3, r0
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e267      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	2b00      	cmp	r3, #0
 8000938:	d075      	beq.n	8000a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800093a:	4b88      	ldr	r3, [pc, #544]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	f003 030c 	and.w	r3, r3, #12
 8000942:	2b04      	cmp	r3, #4
 8000944:	d00c      	beq.n	8000960 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000946:	4b85      	ldr	r3, [pc, #532]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800094e:	2b08      	cmp	r3, #8
 8000950:	d112      	bne.n	8000978 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000952:	4b82      	ldr	r3, [pc, #520]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800095a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800095e:	d10b      	bne.n	8000978 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000960:	4b7e      	ldr	r3, [pc, #504]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000968:	2b00      	cmp	r3, #0
 800096a:	d05b      	beq.n	8000a24 <HAL_RCC_OscConfig+0x108>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d157      	bne.n	8000a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	e242      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000980:	d106      	bne.n	8000990 <HAL_RCC_OscConfig+0x74>
 8000982:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a75      	ldr	r2, [pc, #468]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800098c:	6013      	str	r3, [r2, #0]
 800098e:	e01d      	b.n	80009cc <HAL_RCC_OscConfig+0xb0>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000998:	d10c      	bne.n	80009b4 <HAL_RCC_OscConfig+0x98>
 800099a:	4b70      	ldr	r3, [pc, #448]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a6f      	ldr	r2, [pc, #444]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 80009a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	4b6d      	ldr	r3, [pc, #436]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a6c      	ldr	r2, [pc, #432]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 80009ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e00b      	b.n	80009cc <HAL_RCC_OscConfig+0xb0>
 80009b4:	4b69      	ldr	r3, [pc, #420]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a68      	ldr	r2, [pc, #416]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 80009ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b66      	ldr	r3, [pc, #408]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a65      	ldr	r2, [pc, #404]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 80009c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d013      	beq.n	80009fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d4:	f7ff fee0 	bl	8000798 <HAL_GetTick>
 80009d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009da:	e008      	b.n	80009ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009dc:	f7ff fedc 	bl	8000798 <HAL_GetTick>
 80009e0:	4602      	mov	r2, r0
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	2b64      	cmp	r3, #100	; 0x64
 80009e8:	d901      	bls.n	80009ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80009ea:	2303      	movs	r3, #3
 80009ec:	e207      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ee:	4b5b      	ldr	r3, [pc, #364]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0f0      	beq.n	80009dc <HAL_RCC_OscConfig+0xc0>
 80009fa:	e014      	b.n	8000a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009fc:	f7ff fecc 	bl	8000798 <HAL_GetTick>
 8000a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a02:	e008      	b.n	8000a16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a04:	f7ff fec8 	bl	8000798 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	2b64      	cmp	r3, #100	; 0x64
 8000a10:	d901      	bls.n	8000a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000a12:	2303      	movs	r3, #3
 8000a14:	e1f3      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a16:	4b51      	ldr	r3, [pc, #324]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d1f0      	bne.n	8000a04 <HAL_RCC_OscConfig+0xe8>
 8000a22:	e000      	b.n	8000a26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d063      	beq.n	8000afa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a32:	4b4a      	ldr	r3, [pc, #296]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	f003 030c 	and.w	r3, r3, #12
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00b      	beq.n	8000a56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a3e:	4b47      	ldr	r3, [pc, #284]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000a46:	2b08      	cmp	r3, #8
 8000a48:	d11c      	bne.n	8000a84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000a4a:	4b44      	ldr	r3, [pc, #272]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d116      	bne.n	8000a84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a56:	4b41      	ldr	r3, [pc, #260]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d005      	beq.n	8000a6e <HAL_RCC_OscConfig+0x152>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d001      	beq.n	8000a6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e1c7      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a6e:	4b3b      	ldr	r3, [pc, #236]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	4937      	ldr	r1, [pc, #220]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a82:	e03a      	b.n	8000afa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d020      	beq.n	8000ace <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a8c:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <HAL_RCC_OscConfig+0x244>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a92:	f7ff fe81 	bl	8000798 <HAL_GetTick>
 8000a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a98:	e008      	b.n	8000aac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a9a:	f7ff fe7d 	bl	8000798 <HAL_GetTick>
 8000a9e:	4602      	mov	r2, r0
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d901      	bls.n	8000aac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e1a8      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d0f0      	beq.n	8000a9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ab8:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	4925      	ldr	r1, [pc, #148]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	600b      	str	r3, [r1, #0]
 8000acc:	e015      	b.n	8000afa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ace:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <HAL_RCC_OscConfig+0x244>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ad4:	f7ff fe60 	bl	8000798 <HAL_GetTick>
 8000ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ada:	e008      	b.n	8000aee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000adc:	f7ff fe5c 	bl	8000798 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d901      	bls.n	8000aee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000aea:	2303      	movs	r3, #3
 8000aec:	e187      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aee:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d1f0      	bne.n	8000adc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d036      	beq.n	8000b74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d016      	beq.n	8000b3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_RCC_OscConfig+0x248>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b14:	f7ff fe40 	bl	8000798 <HAL_GetTick>
 8000b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b1a:	e008      	b.n	8000b2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b1c:	f7ff fe3c 	bl	8000798 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d901      	bls.n	8000b2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	e167      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_RCC_OscConfig+0x240>)
 8000b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0f0      	beq.n	8000b1c <HAL_RCC_OscConfig+0x200>
 8000b3a:	e01b      	b.n	8000b74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_RCC_OscConfig+0x248>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b42:	f7ff fe29 	bl	8000798 <HAL_GetTick>
 8000b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b48:	e00e      	b.n	8000b68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b4a:	f7ff fe25 	bl	8000798 <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d907      	bls.n	8000b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	e150      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	42470000 	.word	0x42470000
 8000b64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b68:	4b88      	ldr	r3, [pc, #544]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1ea      	bne.n	8000b4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 0304 	and.w	r3, r3, #4
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	f000 8097 	beq.w	8000cb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b86:	4b81      	ldr	r3, [pc, #516]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d10f      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b7d      	ldr	r3, [pc, #500]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a7c      	ldr	r2, [pc, #496]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b7a      	ldr	r3, [pc, #488]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bb2:	4b77      	ldr	r3, [pc, #476]	; (8000d90 <HAL_RCC_OscConfig+0x474>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d118      	bne.n	8000bf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bbe:	4b74      	ldr	r3, [pc, #464]	; (8000d90 <HAL_RCC_OscConfig+0x474>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a73      	ldr	r2, [pc, #460]	; (8000d90 <HAL_RCC_OscConfig+0x474>)
 8000bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bca:	f7ff fde5 	bl	8000798 <HAL_GetTick>
 8000bce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bd0:	e008      	b.n	8000be4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000bd2:	f7ff fde1 	bl	8000798 <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d901      	bls.n	8000be4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000be0:	2303      	movs	r3, #3
 8000be2:	e10c      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be4:	4b6a      	ldr	r3, [pc, #424]	; (8000d90 <HAL_RCC_OscConfig+0x474>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f0      	beq.n	8000bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d106      	bne.n	8000c06 <HAL_RCC_OscConfig+0x2ea>
 8000bf8:	4b64      	ldr	r3, [pc, #400]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bfc:	4a63      	ldr	r2, [pc, #396]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6713      	str	r3, [r2, #112]	; 0x70
 8000c04:	e01c      	b.n	8000c40 <HAL_RCC_OscConfig+0x324>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b05      	cmp	r3, #5
 8000c0c:	d10c      	bne.n	8000c28 <HAL_RCC_OscConfig+0x30c>
 8000c0e:	4b5f      	ldr	r3, [pc, #380]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c12:	4a5e      	ldr	r2, [pc, #376]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6713      	str	r3, [r2, #112]	; 0x70
 8000c1a:	4b5c      	ldr	r3, [pc, #368]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c1e:	4a5b      	ldr	r2, [pc, #364]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6713      	str	r3, [r2, #112]	; 0x70
 8000c26:	e00b      	b.n	8000c40 <HAL_RCC_OscConfig+0x324>
 8000c28:	4b58      	ldr	r3, [pc, #352]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c2c:	4a57      	ldr	r2, [pc, #348]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000c2e:	f023 0301 	bic.w	r3, r3, #1
 8000c32:	6713      	str	r3, [r2, #112]	; 0x70
 8000c34:	4b55      	ldr	r3, [pc, #340]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c38:	4a54      	ldr	r2, [pc, #336]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000c3a:	f023 0304 	bic.w	r3, r3, #4
 8000c3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d015      	beq.n	8000c74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c48:	f7ff fda6 	bl	8000798 <HAL_GetTick>
 8000c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c4e:	e00a      	b.n	8000c66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c50:	f7ff fda2 	bl	8000798 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e0cb      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c66:	4b49      	ldr	r3, [pc, #292]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0ee      	beq.n	8000c50 <HAL_RCC_OscConfig+0x334>
 8000c72:	e014      	b.n	8000c9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c74:	f7ff fd90 	bl	8000798 <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c7a:	e00a      	b.n	8000c92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c7c:	f7ff fd8c 	bl	8000798 <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e0b5      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000c92:	4b3e      	ldr	r3, [pc, #248]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1ee      	bne.n	8000c7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000c9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d105      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ca4:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a38      	ldr	r2, [pc, #224]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 80a1 	beq.w	8000dfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000cba:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	f003 030c 	and.w	r3, r3, #12
 8000cc2:	2b08      	cmp	r3, #8
 8000cc4:	d05c      	beq.n	8000d80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d141      	bne.n	8000d52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cce:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <HAL_RCC_OscConfig+0x478>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd4:	f7ff fd60 	bl	8000798 <HAL_GetTick>
 8000cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cda:	e008      	b.n	8000cee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cdc:	f7ff fd5c 	bl	8000798 <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d901      	bls.n	8000cee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000cea:	2303      	movs	r3, #3
 8000cec:	e087      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000cee:	4b27      	ldr	r3, [pc, #156]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f0      	bne.n	8000cdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69da      	ldr	r2, [r3, #28]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a1b      	ldr	r3, [r3, #32]
 8000d02:	431a      	orrs	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d10:	085b      	lsrs	r3, r3, #1
 8000d12:	3b01      	subs	r3, #1
 8000d14:	041b      	lsls	r3, r3, #16
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	061b      	lsls	r3, r3, #24
 8000d1e:	491b      	ldr	r1, [pc, #108]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000d20:	4313      	orrs	r3, r2
 8000d22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <HAL_RCC_OscConfig+0x478>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fd35 	bl	8000798 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d32:	f7ff fd31 	bl	8000798 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e05c      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_RCC_OscConfig+0x416>
 8000d50:	e054      	b.n	8000dfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_RCC_OscConfig+0x478>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d58:	f7ff fd1e 	bl	8000798 <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d60:	f7ff fd1a 	bl	8000798 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e045      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_RCC_OscConfig+0x470>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f0      	bne.n	8000d60 <HAL_RCC_OscConfig+0x444>
 8000d7e:	e03d      	b.n	8000dfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d107      	bne.n	8000d98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e038      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40007000 	.word	0x40007000
 8000d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000d98:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <HAL_RCC_OscConfig+0x4ec>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d028      	beq.n	8000df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d121      	bne.n	8000df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d11a      	bne.n	8000df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000dc8:	4013      	ands	r3, r2
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d111      	bne.n	8000df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dde:	085b      	lsrs	r3, r3, #1
 8000de0:	3b01      	subs	r3, #1
 8000de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d107      	bne.n	8000df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d001      	beq.n	8000dfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e000      	b.n	8000dfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40023800 	.word	0x40023800

08000e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d101      	bne.n	8000e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e0cc      	b.n	8000fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e20:	4b68      	ldr	r3, [pc, #416]	; (8000fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d90c      	bls.n	8000e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e2e:	4b65      	ldr	r3, [pc, #404]	; (8000fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e36:	4b63      	ldr	r3, [pc, #396]	; (8000fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d001      	beq.n	8000e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e0b8      	b.n	8000fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0302 	and.w	r3, r3, #2
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d020      	beq.n	8000e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e60:	4b59      	ldr	r3, [pc, #356]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	4a58      	ldr	r2, [pc, #352]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000e6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0308 	and.w	r3, r3, #8
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d005      	beq.n	8000e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e78:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	4a52      	ldr	r2, [pc, #328]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e84:	4b50      	ldr	r3, [pc, #320]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	494d      	ldr	r1, [pc, #308]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d044      	beq.n	8000f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d107      	bne.n	8000eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eaa:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d119      	bne.n	8000eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e07f      	b.n	8000fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d003      	beq.n	8000eca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d107      	bne.n	8000eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eca:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d109      	bne.n	8000eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e06f      	b.n	8000fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eda:	4b3b      	ldr	r3, [pc, #236]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e067      	b.n	8000fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000eea:	4b37      	ldr	r3, [pc, #220]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f023 0203 	bic.w	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	4934      	ldr	r1, [pc, #208]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000efc:	f7ff fc4c 	bl	8000798 <HAL_GetTick>
 8000f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f02:	e00a      	b.n	8000f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f04:	f7ff fc48 	bl	8000798 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e04f      	b.n	8000fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 020c 	and.w	r2, r3, #12
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d1eb      	bne.n	8000f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f2c:	4b25      	ldr	r3, [pc, #148]	; (8000fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d20c      	bcs.n	8000f54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f3a:	4b22      	ldr	r3, [pc, #136]	; (8000fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d001      	beq.n	8000f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e032      	b.n	8000fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d008      	beq.n	8000f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	4916      	ldr	r1, [pc, #88]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d009      	beq.n	8000f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	490e      	ldr	r1, [pc, #56]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f92:	f000 f821 	bl	8000fd8 <HAL_RCC_GetSysClockFreq>
 8000f96:	4602      	mov	r2, r0
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	490a      	ldr	r1, [pc, #40]	; (8000fcc <HAL_RCC_ClockConfig+0x1c0>)
 8000fa4:	5ccb      	ldrb	r3, [r1, r3]
 8000fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8000fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fbac 	bl	8000710 <HAL_InitTick>

  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023c00 	.word	0x40023c00
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	08001254 	.word	0x08001254
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fdc:	b094      	sub	sp, #80	; 0x50
 8000fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000fe8:	2300      	movs	r3, #0
 8000fea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ff0:	4b79      	ldr	r3, [pc, #484]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d00d      	beq.n	8001018 <HAL_RCC_GetSysClockFreq+0x40>
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	f200 80e1 	bhi.w	80011c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001002:	2b00      	cmp	r3, #0
 8001004:	d002      	beq.n	800100c <HAL_RCC_GetSysClockFreq+0x34>
 8001006:	2b04      	cmp	r3, #4
 8001008:	d003      	beq.n	8001012 <HAL_RCC_GetSysClockFreq+0x3a>
 800100a:	e0db      	b.n	80011c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800100c:	4b73      	ldr	r3, [pc, #460]	; (80011dc <HAL_RCC_GetSysClockFreq+0x204>)
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001010:	e0db      	b.n	80011ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001012:	4b73      	ldr	r3, [pc, #460]	; (80011e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001016:	e0d8      	b.n	80011ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001018:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001022:	4b6d      	ldr	r3, [pc, #436]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d063      	beq.n	80010f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800102e:	4b6a      	ldr	r3, [pc, #424]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	099b      	lsrs	r3, r3, #6
 8001034:	2200      	movs	r2, #0
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
 8001038:	63fa      	str	r2, [r7, #60]	; 0x3c
 800103a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800103c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001040:	633b      	str	r3, [r7, #48]	; 0x30
 8001042:	2300      	movs	r3, #0
 8001044:	637b      	str	r3, [r7, #52]	; 0x34
 8001046:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800104a:	4622      	mov	r2, r4
 800104c:	462b      	mov	r3, r5
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	f04f 0100 	mov.w	r1, #0
 8001056:	0159      	lsls	r1, r3, #5
 8001058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800105c:	0150      	lsls	r0, r2, #5
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4621      	mov	r1, r4
 8001064:	1a51      	subs	r1, r2, r1
 8001066:	6139      	str	r1, [r7, #16]
 8001068:	4629      	mov	r1, r5
 800106a:	eb63 0301 	sbc.w	r3, r3, r1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800107c:	4659      	mov	r1, fp
 800107e:	018b      	lsls	r3, r1, #6
 8001080:	4651      	mov	r1, sl
 8001082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001086:	4651      	mov	r1, sl
 8001088:	018a      	lsls	r2, r1, #6
 800108a:	4651      	mov	r1, sl
 800108c:	ebb2 0801 	subs.w	r8, r2, r1
 8001090:	4659      	mov	r1, fp
 8001092:	eb63 0901 	sbc.w	r9, r3, r1
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80010a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80010a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80010aa:	4690      	mov	r8, r2
 80010ac:	4699      	mov	r9, r3
 80010ae:	4623      	mov	r3, r4
 80010b0:	eb18 0303 	adds.w	r3, r8, r3
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	462b      	mov	r3, r5
 80010b8:	eb49 0303 	adc.w	r3, r9, r3
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 0300 	mov.w	r3, #0
 80010c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80010ca:	4629      	mov	r1, r5
 80010cc:	024b      	lsls	r3, r1, #9
 80010ce:	4621      	mov	r1, r4
 80010d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80010d4:	4621      	mov	r1, r4
 80010d6:	024a      	lsls	r2, r1, #9
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010de:	2200      	movs	r2, #0
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80010e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80010e8:	f7ff f86e 	bl	80001c8 <__aeabi_uldivmod>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4613      	mov	r3, r2
 80010f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010f4:	e058      	b.n	80011a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	099b      	lsrs	r3, r3, #6
 80010fc:	2200      	movs	r2, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	4611      	mov	r1, r2
 8001102:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001106:	623b      	str	r3, [r7, #32]
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
 800110c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001110:	4642      	mov	r2, r8
 8001112:	464b      	mov	r3, r9
 8001114:	f04f 0000 	mov.w	r0, #0
 8001118:	f04f 0100 	mov.w	r1, #0
 800111c:	0159      	lsls	r1, r3, #5
 800111e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001122:	0150      	lsls	r0, r2, #5
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4641      	mov	r1, r8
 800112a:	ebb2 0a01 	subs.w	sl, r2, r1
 800112e:	4649      	mov	r1, r9
 8001130:	eb63 0b01 	sbc.w	fp, r3, r1
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	f04f 0300 	mov.w	r3, #0
 800113c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001140:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001144:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001148:	ebb2 040a 	subs.w	r4, r2, sl
 800114c:	eb63 050b 	sbc.w	r5, r3, fp
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	00eb      	lsls	r3, r5, #3
 800115a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800115e:	00e2      	lsls	r2, r4, #3
 8001160:	4614      	mov	r4, r2
 8001162:	461d      	mov	r5, r3
 8001164:	4643      	mov	r3, r8
 8001166:	18e3      	adds	r3, r4, r3
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	464b      	mov	r3, r9
 800116c:	eb45 0303 	adc.w	r3, r5, r3
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800117e:	4629      	mov	r1, r5
 8001180:	028b      	lsls	r3, r1, #10
 8001182:	4621      	mov	r1, r4
 8001184:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001188:	4621      	mov	r1, r4
 800118a:	028a      	lsls	r2, r1, #10
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001192:	2200      	movs	r2, #0
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	61fa      	str	r2, [r7, #28]
 8001198:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800119c:	f7ff f814 	bl	80001c8 <__aeabi_uldivmod>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4613      	mov	r3, r2
 80011a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	0c1b      	lsrs	r3, r3, #16
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	3301      	adds	r3, #1
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80011b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80011ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80011c2:	e002      	b.n	80011ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_RCC_GetSysClockFreq+0x204>)
 80011c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80011c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3750      	adds	r7, #80	; 0x50
 80011d0:	46bd      	mov	sp, r7
 80011d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	00f42400 	.word	0x00f42400
 80011e0:	007a1200 	.word	0x007a1200

080011e4 <__libc_init_array>:
 80011e4:	b570      	push	{r4, r5, r6, lr}
 80011e6:	4d0d      	ldr	r5, [pc, #52]	; (800121c <__libc_init_array+0x38>)
 80011e8:	4c0d      	ldr	r4, [pc, #52]	; (8001220 <__libc_init_array+0x3c>)
 80011ea:	1b64      	subs	r4, r4, r5
 80011ec:	10a4      	asrs	r4, r4, #2
 80011ee:	2600      	movs	r6, #0
 80011f0:	42a6      	cmp	r6, r4
 80011f2:	d109      	bne.n	8001208 <__libc_init_array+0x24>
 80011f4:	4d0b      	ldr	r5, [pc, #44]	; (8001224 <__libc_init_array+0x40>)
 80011f6:	4c0c      	ldr	r4, [pc, #48]	; (8001228 <__libc_init_array+0x44>)
 80011f8:	f000 f820 	bl	800123c <_init>
 80011fc:	1b64      	subs	r4, r4, r5
 80011fe:	10a4      	asrs	r4, r4, #2
 8001200:	2600      	movs	r6, #0
 8001202:	42a6      	cmp	r6, r4
 8001204:	d105      	bne.n	8001212 <__libc_init_array+0x2e>
 8001206:	bd70      	pop	{r4, r5, r6, pc}
 8001208:	f855 3b04 	ldr.w	r3, [r5], #4
 800120c:	4798      	blx	r3
 800120e:	3601      	adds	r6, #1
 8001210:	e7ee      	b.n	80011f0 <__libc_init_array+0xc>
 8001212:	f855 3b04 	ldr.w	r3, [r5], #4
 8001216:	4798      	blx	r3
 8001218:	3601      	adds	r6, #1
 800121a:	e7f2      	b.n	8001202 <__libc_init_array+0x1e>
 800121c:	0800126c 	.word	0x0800126c
 8001220:	0800126c 	.word	0x0800126c
 8001224:	0800126c 	.word	0x0800126c
 8001228:	08001270 	.word	0x08001270

0800122c <memset>:
 800122c:	4402      	add	r2, r0
 800122e:	4603      	mov	r3, r0
 8001230:	4293      	cmp	r3, r2
 8001232:	d100      	bne.n	8001236 <memset+0xa>
 8001234:	4770      	bx	lr
 8001236:	f803 1b01 	strb.w	r1, [r3], #1
 800123a:	e7f9      	b.n	8001230 <memset+0x4>

0800123c <_init>:
 800123c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123e:	bf00      	nop
 8001240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001242:	bc08      	pop	{r3}
 8001244:	469e      	mov	lr, r3
 8001246:	4770      	bx	lr

08001248 <_fini>:
 8001248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800124a:	bf00      	nop
 800124c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124e:	bc08      	pop	{r3}
 8001250:	469e      	mov	lr, r3
 8001252:	4770      	bx	lr
